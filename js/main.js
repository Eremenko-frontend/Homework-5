function writeTaskList(){var e="",t=document.createElement("input");t.type="checkbox",t.className="task__one-item-checkbox",t.value=0;var a=document.createElement("span");a.className="task__text-part-item";var s=document.createElement("li");s.appendChild(t);for(var o in myListTask)!0===myListTask[o].itemStatus?s.className="task__one-item task__one-item--complete":s.className="task__one-item";e+=myListTask[o].itemTask,a.appendChild(document.createTextNode(e)),s.appendChild(a);document.getElementById("task__list").appendChild(s)}function writeTaskListLocalStorage(){var e="",t=document.createElement("input");t.type="checkbox",t.className="task__one-item-checkbox",t.value=0;var a=document.createElement("span");a.className="task__text-part-item";var s=document.createElement("li");s.appendChild(t),!0===myListTask[key].itemStatus?s.className="task__one-item task__one-item--complete":s.className="task__one-item",e+=myListTask[key].itemTask,a.appendChild(document.createTextNode(e)),s.appendChild(a);document.getElementById("task__list").appendChild(s)}var myListTask=[];if(void 0!=localStorage.getItem("todoTaskList"))for(var lengthmyListTask=(myListTask=JSON.parse(localStorage.getItem("todoTaskList"))).length,key=0;key<lengthmyListTask;key++)writeTaskListLocalStorage();var whatsupktaskWriteB=document.getElementById("taskWriteButton");whatsupktaskWriteB.onclick=function(){var e=document.getElementById("task__write-input").value,t={};t.itemTask=e,t.itemStatus=!1,myListTask[myListTask.length]=t,console.log(myListTask),writeTaskList(),localStorage.setItem("todoTaskList",JSON.stringify(myListTask))};var taskDeleteB=document.getElementById("taskDeleteButton");taskDeleteB.onclick=function(){for(var e=document.getElementsByClassName("task__one-item-checkbox"),t=0;t<e.length;t++)if(e[t].checked){e[t].parentNode.remove(),(myListTask=JSON.parse(localStorage.getItem("todoTaskList"))).splice(t,1),localStorage.setItem("todoTaskList",JSON.stringify(myListTask))}};var markCompletedTaskB=document.getElementById("markCompletedTask");markCompletedTaskB.onclick=function(){for(var e=document.getElementsByClassName("task__one-item-checkbox"),t=0;t<e.length;t++)if(e[t].checked){e[t].parentNode.classList.add("task__one-item--complete"),(myListTask=JSON.parse(localStorage.getItem("todoTaskList")))[t].itemStatus=!0,localStorage.setItem("todoTaskList",JSON.stringify(myListTask))}};var removeMarkCompletedTaskB=document.getElementById("markNotCompletedTask");removeMarkCompletedTaskB.onclick=function(){for(var e=document.getElementsByClassName("task__one-item-checkbox"),t=0;t<e.length;t++)if(e[t].checked){e[t].parentNode.classList.remove("task__one-item--complete"),(myListTask=JSON.parse(localStorage.getItem("todoTaskList")))[t].itemStatus=!1,localStorage.setItem("todoTaskList",JSON.stringify(myListTask))}};var numberSelectedTask=0,blockTaskNumberSelected=document.getElementById("task__number-selected");document.addEventListener("change",function(e){var t=e.target;t.value;return t.checked?numberSelectedTask+=1:numberSelectedTask-=1,console.log(numberSelectedTask),blockTaskNumberSelected.innerHTML=numberSelectedTask,numberSelectedTask},!1),blockTaskNumberSelected.innerHTML=numberSelectedTask;var clearListTaskB=document.getElementById("clearListTask");clearListTaskB.onclick=function(){localStorage.clear()};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
